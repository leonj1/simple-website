name: Semantic Version and Tag

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  version-and-tag:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.version.outputs.new_tag }}
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper version calculation

      - name: Get next version
        id: version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true  # Don't create tag yet, just calculate version
          default_bump: patch
          tag_prefix: v
          # Analyze commit messages for version bumping
          # feat: minor bump
          # fix: patch bump  
          # BREAKING CHANGE: major bump
          release_branches: main
          pre_release_branches: '^((dev|develop|staging|beta|preview)/.*)$'
          custom_release_rules: |
            chore:patch,
            docs:patch,
            style:patch,
            refactor:patch,
            perf:patch,
            test:patch,
            build:patch,
            ci:patch

      - name: Check if this is first release
        id: check_previous_tag
        run: |
          if [ -z "${{ steps.version.outputs.previous_tag }}" ]; then
            echo "is_first_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_first_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog from commits
        id: changelog
        if: steps.check_previous_tag.outputs.is_first_release == 'false'
        run: |
          PREVIOUS_TAG="${{ steps.version.outputs.previous_tag }}"
          CHANGELOG=""
          
          # Get commit messages between previous tag and HEAD
          while IFS= read -r commit; do
            if [[ -n "$commit" ]]; then
              CHANGELOG="${CHANGELOG}- ${commit}"$'\n'
            fi
          done < <(git log "${PREVIOUS_TAG}..HEAD" --pretty=format:"%s" --reverse)
          
          # Set multiline output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get commits for first release
        id: first_release_commits
        if: steps.check_previous_tag.outputs.is_first_release == 'true'
        run: |
          COMMITS=$(git log --pretty=format:"- %s" --reverse)
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: steps.version.outputs.new_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.version.outputs.new_tag }}
          tag_prefix: v

      - name: Create Release
        if: steps.version.outputs.new_tag
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.new_tag }}
          name: Release ${{ steps.version.outputs.new_tag }}
          body: |
            ## What's Changed
            ${{ steps.check_previous_tag.outputs.is_first_release == 'true' && steps.first_release_commits.outputs.commits || steps.changelog.outputs.changelog }}
            
            ${{ steps.check_previous_tag.outputs.is_first_release == 'false' && format('**Full Changelog**: https://github.com/{0}/compare/{1}...{2}', github.repository, steps.version.outputs.previous_tag, steps.version.outputs.new_tag) || '**Initial Release**' }}
          makeLatest: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update package.json version (if exists)
        if: steps.version.outputs.new_tag
        run: |
          if [ -f "package.json" ]; then
            VERSION="${{ steps.version.outputs.new_version }}"
            jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp
            mv package.json.tmp package.json
            
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            git add package.json
            git commit -m "chore: bump version to ${{ steps.version.outputs.new_tag }} [skip ci]"
            git push origin main
          fi

  create-zip-artifact:
    needs: version-and-tag
    runs-on: ubuntu-latest
    if: needs.version-and-tag.outputs.new_tag
    outputs:
      artifact_name: simple-website-${{ needs.version-and-tag.outputs.new_tag }}.zip
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create zip artifact
        run: |
          VERSION="${{ needs.version-and-tag.outputs.new_tag }}"
          echo "Creating zip artifact with version: $VERSION"
          
          # Check if Dockerfile.zip exists
          if [ ! -f "Dockerfile.zip" ]; then
            echo "Dockerfile.zip not found. Creating it..."
            cat > Dockerfile.zip << 'DOCKERFILE_EOF'
          FROM alpine:latest
          
          # Install zip
          RUN apk add --no-cache zip
          
          # Accept version as build arg
          ARG VERSION=latest
          ENV VERSION=${VERSION}
          
          # Set working directory
          WORKDIR /workspace
          
          # Copy project files (excluding unwanted files)
          COPY . .
          
          # Create zip file with version in filename
          CMD sh -c "zip -r /output/dark-theme-landing-${VERSION}.zip . \
               -x 'node_modules/*' \
               -x 'build/*' \
               -x '*.zip' \
               -x '.git/*' \
               -x '.gitignore' \
               -x '*.log' \
               -x '.DS_Store' \
               -x 'Dockerfile.zip'"
          DOCKERFILE_EOF
          fi
          
          make docker-zip VERSION=$VERSION

      - name: Rename artifact for S3
        run: |
          mv "dark-theme-landing-${{ needs.version-and-tag.outputs.new_tag }}.zip" "simple-website-${{ needs.version-and-tag.outputs.new_tag }}.zip"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build React application
        run: |
          echo "Building React application..."
          npm install
          npm run build
          
      - name: Upload website content to S3
        run: |
          VERSION="${{ needs.version-and-tag.outputs.new_tag }}"
          PREFIX="${{ secrets.AWS_S3_PREFIX }}"
          
          # Ensure prefix ends with / if it exists and doesn't already
          if [ -n "$PREFIX" ] && [[ ! "$PREFIX" =~ /$ ]]; then
            PREFIX="${PREFIX}/"
          fi
          
          # Upload the build directory contents to the versioned path
          S3_PATH="s3://${{ secrets.AWS_S3_BUCKET }}/${PREFIX}${VERSION}/"
          
          echo "Uploading build contents to S3..."
          echo "Full S3 path: ${S3_PATH}"
          
          # Sync the build directory to S3
          aws s3 sync build/ "${S3_PATH}" \
            --delete \
            --metadata "version=${VERSION},build-date=$(date -u +%Y-%m-%dT%H:%M:%SZ),github-run-id=${{ github.run_id }}"
          
          echo "✓ Website content uploaded to: ${S3_PATH}"
          
          # Also upload the zip artifact to an archives folder for reference
          ARTIFACT_NAME="simple-website-${VERSION}.zip"
          ARCHIVE_PATH="s3://${{ secrets.AWS_S3_BUCKET }}/${PREFIX}archives/${ARTIFACT_NAME}"
          
          echo "Uploading zip archive for reference..."
          echo "Archive path: ${ARCHIVE_PATH}"
          aws s3 cp "${ARTIFACT_NAME}" "${ARCHIVE_PATH}" \
            --metadata "version=${VERSION},build-date=$(date -u +%Y-%m-%dT%H:%M:%SZ),github-run-id=${{ github.run_id }}"
          
          echo "✓ Archive uploaded to: ${ARCHIVE_PATH}"

      - name: List and cleanup old artifacts
        run: |
          PREFIX="${{ secrets.AWS_S3_PREFIX }}"
          BUCKET="${{ secrets.AWS_S3_BUCKET }}"
          
          # Ensure prefix ends with / if it exists and doesn't already
          if [ -n "$PREFIX" ] && [[ ! "$PREFIX" =~ /$ ]]; then
            PREFIX="${PREFIX}/"
          fi
          
          echo "=== Cleaning up old website versions ==="
          
          # List all version directories (they start with 'v')
          aws s3api list-objects-v2 \
            --bucket "${BUCKET}" \
            --prefix "${PREFIX}v" \
            --delimiter "/" \
            --query "CommonPrefixes[].Prefix" \
            --output text | tr '\t' '\n' | sort -Vr > all-versions.txt
          
          # Keep only the 5 most recent versions
          if [ -s all-versions.txt ]; then
            tail -n +6 all-versions.txt > versions-to-delete.txt
            
            if [ -s versions-to-delete.txt ]; then
              echo "Website versions to delete:"
              cat versions-to-delete.txt
              
              # Delete old version directories
              while IFS= read -r prefix; do
                if [ -n "$prefix" ]; then
                  echo "Deleting version: $prefix"
                  aws s3 rm "s3://${BUCKET}/${prefix}" --recursive
                fi
              done < versions-to-delete.txt
              
              echo "✓ Old website versions cleaned up"
            else
              echo "No old website versions to delete (keeping 5 most recent)"
            fi
          fi
          
          echo "=== Cleaning up old archive files ==="
          
          # Clean up old zip archives
          aws s3api list-objects-v2 \
            --bucket "${BUCKET}" \
            --prefix "${PREFIX}archives/simple-website-" \
            --query "reverse(sort_by(Contents[?ends_with(Key, '.zip')], &LastModified))[5:].Key" \
            --output text | tr '\t' '\n' > archives-to-delete.txt
          
          # Check if there are archives to delete
          if [ -s archives-to-delete.txt ] && [ "$(cat archives-to-delete.txt)" != "None" ]; then
            echo "Archive files to delete:"
            cat archives-to-delete.txt
            
            # Delete old archives
            while IFS= read -r key; do
              if [ -n "$key" ] && [ "$key" != "None" ]; then
                echo "Deleting archive: $key"
                aws s3 rm "s3://${BUCKET}/${key}"
              fi
            done < archives-to-delete.txt
            
            echo "✓ Old archives cleaned up"
          else
            echo "No old archives to delete (keeping 5 most recent)"
          fi

      - name: Upload artifact to release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.version-and-tag.outputs.new_tag }}
          artifacts: "simple-website-${{ needs.version-and-tag.outputs.new_tag }}.zip"
          artifactContentType: application/zip
          allowUpdates: true
          omitBody: true
          omitName: true
          token: ${{ secrets.GITHUB_TOKEN }}